var EXPECTED_PATH  := basedir + "/egl/expected.txt";
var GENERATED_PATH := basedir + "/../../generated/tree.txt";
var GENERATED_DIR_FILE := new Native('java.io.File')(GENERATED_PATH).parentFile;
var PCLASS_PATH := basedir + '/egl/partial-class.txt';

var EXPECTED_MODEL := '
@Spec {
	Metamodel "TreeMetamodel" {
		nsUri: "Tree"
	}
}

Model {
  Tree "A" {
    label: "A"
  }
  Tree "B" {
    label: "B"
    parent: Tree "A"
  }
  Tree "C" {
    label: "C"
    parent: Tree "B"
  }
  Tree "D" {
    label: "D"
    parent: Tree "B"
  }
  Tree "E" {
    label: "E"
    parent: Tree "A"
  }
}  
';

var DIFFERENT_MODEL := '
@Spec {
	Metamodel "TreeMetamodel" {
		nsUri: "Tree"
	}
}

Model {
  Tree "A" {
    label: "A"
  }
  Tree "B" {
    label: "B"
    parent: Tree "A"
  }
  Tree "E" {
    label: "E"
    parent: Tree "A"
  }
}
';

@setup
operation createGeneratedDir() {
  GENERATED_DIR_FILE.mkdirs();
}

@teardown
operation deleteGeneratedDir() {
  var task = antProject.createTask('delete');
  task.setDir(GENERATED_DIR_FILE);
  task.execute();
}

@test
operation expectedModelGeneratesExpectedFile() {
  loadHutn("Tree", EXPECTED_MODEL);
  runTarget("tree2text");
  assertEqualFilesIgnoringLineEndings(EXPECTED_PATH, GENERATED_PATH);
}

@test
operation expectedModelGeneratesExpectedFileFailing() {
  loadHutn("Tree", EXPECTED_MODEL);
  runTarget("tree2text");
  // this test must fail
  assertNotEqualFilesIgnoringLineEndings(EXPECTED_PATH, GENERATED_PATH);
}

@test
operation differentModelGeneratesDifferentFile() {
  loadHutn("Tree", DIFFERENT_MODEL);
  runTarget("tree2text");
  assertNotEqualFiles(EXPECTED_PATH, GENERATED_PATH);
}

@test
operation differentModelGeneratesDifferentFileFailing() {
  loadHutn("Tree", DIFFERENT_MODEL);
  runTarget("tree2text");
  // this test must fail
  assertEqualFiles(EXPECTED_PATH, GENERATED_PATH);
}

@test
operation missingExpectedPathFailsTest() {
  loadHutn("Tree", EXPECTED_MODEL);
  runTarget("tree2text");
  // this test must fail
  assertEqualFiles("idonotexist", GENERATED_PATH);
}

@test
operation missingActualPathFailsTest() {
  loadHutn("Tree", EXPECTED_MODEL);
  runTarget("tree2text");
  // this test must fail
  assertNotEqualFiles(EXPECTED_PATH, "idonotexist");
}

@test
operation matchingSubstring() {
  loadHutn("Tree", EXPECTED_MODEL);
  runTarget("tree2text");
  assertMatchingLine(EXPECTED_PATH, "- A");
}

@test
operation matchingRegexp1() {
  loadHutn("Tree", EXPECTED_MODEL);
  runTarget("tree2text");
  assertMatchingLine(EXPECTED_PATH, "- [A-Z]");
}

@test
operation matchingRegexp2() {
  loadHutn("Tree", EXPECTED_MODEL);
  runTarget("tree2text");
  assertMatchingLine(EXPECTED_PATH, "^  +- +[A-Z]$");
}

@test
operation regexpWithInvalidSyntax() {
  loadHutn("Tree", EXPECTED_MODEL);
  runTarget("tree2text");
  assertMatchingLine("withMessage", EXPECTED_PATH, "(");
}

@test
operation nonMatchingSubstring() {
  loadHutn("Tree", EXPECTED_MODEL);
  runTarget("tree2text");
  assertMatchingLine(EXPECTED_PATH, "foo");
}

@test
operation nonMatchingRegexp() {
  loadHutn("Tree", EXPECTED_MODEL);
  runTarget("tree2text");
  assertMatchingLine("withMessage", EXPECTED_PATH, "[0-3]");
}

@test
operation assertMatchingLineMatchesEntireLine() {
  loadHutn("Tree", EXPECTED_MODEL);
  runTarget("tree2text");

  // this should fail, as it won't match the *entire* line
  assertMatchingLine(EXPECTED_PATH, "[A-Z]");
}

@test
operation fullMatchWorksForFullLine() {
 assertMatchingLine(PCLASS_PATH, "\\s*partial class Edge\\s*\\{");
}

@test
operation partialMatchWorksForFullLine() {
  assertLineWithMatch("I have a message", PCLASS_PATH, "^\\s*partial class Edge\\s*\\{$");
}

@test
operation partialMatchWorksForSubstring() {
  assertLineWithMatch(PCLASS_PATH, "partial class Edge");
}

@test
operation nonMatchingPartialMatch() {
  assertLineWithMatch("I have a message", PCLASS_PATH, "I do not exist");
}

@test
operation partialMatchWithInvalidSyntax() {
  assertLineWithMatch(PCLASS_PATH, "(");
}
