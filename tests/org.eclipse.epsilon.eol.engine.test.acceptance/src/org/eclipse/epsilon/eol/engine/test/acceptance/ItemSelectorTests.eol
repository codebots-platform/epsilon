@test
operation testExistingIndexInSet() {
	assertEquals(1, Set{1, 2}[0]);
}

@test
operation testExistingIndexInSequence() {
	assertEquals(1, Sequence{1, 2}[0]);
}

@test
operation testIndexOutOfBoundsInCollection() {
	assertError(Sequence{1, 2}[2]);
}

@test
operation testExistingKeyInMap() {
	assertEquals(1, Map{"a" = 1}["a"]);
}

@test
operation testExistingKeyInNativeMap() {
	assertEquals(1, createNativeMap()["a"]);
}

@test
operation testUnknownKeyInMap() {
	assertEquals(null, Map{"a" = 1}["b"]);
}

@test
operation testAssignToListIndex() {
	var s = Sequence{1, 2};
	s[0] = 3;
	assertEquals(3, s[0]);
}

@test
operation testAssignToExistingMapKey() {
	var m = Map{"a" = 1};
	m["a"] = 2;
	assertEquals(2, m["a"]);
}

@test
operation testAssignToExistingNativeMapKey() {
	var m = createNativeMap();
	m["a"] = 2;
	assertEquals(2, m["a"]);
}

@test
operation testAssignToNewMapKey() {
	var m = Map{"a" = 1};
	m["b"] = 2;
	assertEquals(2, m["b"]);
}

@test
operation testAssignToSetIndex() {
	assertError(assignToSetIndex());
}

operation assignToSetIndex() {
	var s = Set{1, 2};
	// This is not allowed as Set is not a java.util.List
	s[0] = 3;
}

operation createNativeMap() {
	var m = new Native("java.util.HashMap");
	m.put("a", 1);
	return m;
}